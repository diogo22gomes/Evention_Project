{
  "openapi": "3.0.0",
  "info": {
    "description": "USER API",
    "version": "1.0.0",
    "title": "Microservice to authenticate and manage users",
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "/user/api"
    }
  ],
  "paths": {
    "/users/send-reset-token": {
      "post": {
        "summary": "Send Reset Token",
        "description": "Sends a password reset token to the user's email.",
        "tags": [
          "Authentication"
        ],
        "operationId": "sendResetToken",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset token sent to your email",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Reset token sent to your email"
                }
              }
            }
          },
          "400": {
            "description": "Email is required",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Email is required"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User not found"
                }
              }
            }
          },
          "500": {
            "description": "Error sending reset token",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error sending reset token"
                }
              }
            }
          }
        }
      }
    },
    "/users/reset-password": {
      "post": {
        "summary": "Reset Password",
        "description": "Reset the user's password using a valid token.",
        "tags": [
          "Authentication"
        ],
        "operationId": "resetPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Password reset successfully"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired token",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Invalid or expired token"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User not found"
                }
              }
            }
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "summary": "Logout a user",
        "description": "Invalidate the user's current session or JWT token.",
        "tags": [
          "Authentication"
        ],
        "operationId": "logoutUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Logout successful"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid token",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Invalid token"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Get all users",
        "description": "Retrieve a list of all users",
        "tags": [
          "Users"
        ],
        "operationId": "getAllUsers",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "description": "Add a new user to the system",
        "tags": [
          "Users"
        ],
        "operationId": "createUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created",
            "schema": {
              "$ref": "#/components/schemas/UserResponse"
            }
          }
        }
      }
    },
    "/createG": {
      "post": {
        "summary": "Create user with google",
        "description": "Add a new user to the system",
        "tags": [
          "Users"
        ],
        "operationId": "createUserG",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GoogleAuthRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User created",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    },
    "/loginG": {
      "post": {
        "summary": "Login User with google",
        "description": "Authenticate a user with google",
        "tags": [
          "Users"
        ],
        "operationId": "loginUserG",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GoogleAuthRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User Logged",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    },
    "/users/softdelete/{id}": {
      "patch": {
        "summary": "Soft Delete User",
        "description": "Soft deletes a user by setting their status to inactive.",
        "tags": [
          "Users"
        ],
        "operationId": "softdeleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the user to soft delete"
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully soft deleted",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User successfully soft deleted"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User not found"
                }
              }
            }
          },
          "500": {
            "description": "Error soft deleting user",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error soft deleting user"
                }
              }
            }
          }
        }
      }
    },
    "/users/byemail/{email}": {
      "get": {
        "summary": "Get User by Email",
        "description": "Retrieve a user by their email address.",
        "tags": [
          "Users"
        ],
        "operationId": "getUserByEmail",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Email of the user to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User not found"
                }
              }
            }
          },
          "500": {
            "description": "Error retrieving user",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error retrieving user"
                }
              }
            }
          }
        }
      }
    },
    "/users/change-password": {
      "put": {
        "summary": "Change Password",
        "description": "Allow a user to change their password by providing their old password and a new password.",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Password changed successfully"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid token",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Invalid token"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - User not found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User not found"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Old password does not match",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Old password does not match"
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "summary": "Login a user",
        "description": "Authenticate a user with email and password",
        "tags": [
          "Authentication"
        ],
        "operationId": "loginUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "schema": {
              "$ref": "#/components/schemas/UserResponse"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Get user by ID",
        "description": "Retrieve a user by their ID",
        "tags": [
          "Users"
        ],
        "operationId": "getUserById",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a user",
        "description": "Permanently delete a user by ID",
        "tags": [
          "Users"
        ],
        "operationId": "deleteUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted"
          }
        }
      },
      "put": {
        "summary": "Update a user",
        "description": "Update the details of a user by ID, including optional profile picture upload",
        "tags": [
          "Users"
        ],
        "operationId": "updateUser",
        "consumes": [
          "multipart/form-data"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Username of the user"
                  },
                  "email": {
                    "type": "string",
                    "description": "Email address of the user"
                  },
                  "phone": {
                    "type": "integer",
                    "description": "Phone number of the user"
                  },
                  "profilePicture": {
                    "type": "string",
                    "format": "binary",
                    "description": "Profile picture file"
                  },
                  "userype_id": {
                    "type": "string",
                    "description": "User type"
                  }
                },
                "required": [
                  "username",
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters, such as missing required fields or invalid file format."
          },
          "404": {
            "description": "User not found for the given ID."
          },
          "500": {
            "description": "Unexpected server error occurred while updating the user."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "userID": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "phone": {
            "type": "integer"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "status": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "loginType": {
            "type": "string"
          }
        }
      },
      "ResetTokenRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com"
          }
        },
        "required": [
          "email"
        ]
      },
      "ResetPasswordRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "newPassword": {
            "type": "string",
            "example": "newSecurePassword123!"
          }
        },
        "required": [
          "token",
          "newPassword"
        ]
      },
      "ChangePassword": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "NewUserRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "username",
          "email",
          "password"
        ]
      },
      "GoogleAuthRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Google ID token used for authentication"
          }
        },
        "required": [
          "token"
        ]
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "phone": {
            "type": "integer"
          },
          "email": {
            "type": "string"
          },
          "profilePicture": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "LoginUserRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password"
        ]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "Bearer token authentication"
      }
    }
  }
}