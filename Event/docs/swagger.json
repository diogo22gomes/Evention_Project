{
  "openapi": "3.0.0",
  "info": {
    "title": "Event API",
    "version": "1.0.0",
    "description": "This API allows users to manage events and address events.",
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "/event/api"
    }
  ],
  "paths": {
    "/events": {
      "get": {
        "summary": "Retrieve all events",
        "description": "This endpoint retrieves a list of all available events. If no events are found, a 404 response is returned. This endpoint does not require authentication.",
        "operationId": "getAllEvents",
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of events.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No events found.",
            "content": {
              "application/json": {
                "examples": {
                  "noEvents": {
                    "summary": "No events available",
                    "value": {
                      "message": "No events found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred on the server while fetching the events.",
            "content": {
              "application/json": {
                "examples": {
                  "serverError": {
                    "summary": "Unexpected error",
                    "value": {
                      "message": "Error fetching events"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new event",
        "description": "This endpoint allows users to create a new event. The event requires basic information such as name, description, start and end times, price, and an optional image file. The user must be authenticated, and the request should include a valid bearer token in the Authorization header. During the process, the user's type will be automatically updated to 'Anunciante' if they are not already one.",
        "operationId": "createEvent",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Events"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "The data required to create a new event. All fields except the event image are mandatory.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the event. This should be a concise and descriptive title.",
                    "example": "Tech Conference 2024"
                  },
                  "description": {
                    "type": "string",
                    "description": "A detailed description of the event, outlining its purpose, agenda, or any other relevant information.",
                    "example": "A cutting-edge conference on emerging tech trends."
                  },
                  "startAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The start date and time of the event in ISO 8601 format (e.g., YYYY-MM-DDTHH:mm:ssZ).",
                    "example": "2024-05-15T09:00:00Z"
                  },
                  "endAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The end date and time of the event in ISO 8601 format (e.g., YYYY-MM-DDTHH:mm:ssZ).",
                    "example": "2024-05-16T17:00:00Z"
                  },
                  "price": {
                    "type": "number",
                    "format": "float",
                    "description": "The price of the event. This value should be a positive number, representing the cost in the applicable currency.",
                    "example": 199.99
                  },
                  "eventPicture": {
                    "type": "string",
                    "format": "binary",
                    "description": "An optional image file representing the event. Accepted file formats include PNG, JPEG, and JPG."
                  }
                },
                "required": [
                  "name",
                  "description",
                  "startAt",
                  "endAt",
                  "price"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The event was successfully created. The response includes the details of the newly created event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                },
                "examples": {
                  "success": {
                    "summary": "Successful creation",
                    "value": {
                      "id": "123e4567-e89b-12d3-a456-426614174000",
                      "name": "Tech Conference 2024",
                      "description": "A cutting-edge conference on emerging tech trends.",
                      "startAt": "2024-05-15T09:00:00Z",
                      "endAt": "2024-05-16T17:00:00Z",
                      "price": 199.99,
                      "eventPicture": "/uploads/event_pictures/tech_conf_2024.png",
                      "userId": "123e4567-e89b-12d3-a456-426614174001",
                      "eventstatus_id": "456e4567-e89b-12d3-a456-426614174002"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request is invalid due to missing required fields or an invalid file format.",
            "content": {
              "application/json": {
                "examples": {
                  "missingFields": {
                    "summary": "Missing required fields",
                    "value": {
                      "message": "Missing required fields"
                    }
                  },
                  "invalidFileFormat": {
                    "summary": "Invalid file format",
                    "value": {
                      "message": "Invalid file type. Only PNG, JPEG, and JPG are allowed."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred on the server while processing the request.",
            "content": {
              "application/json": {
                "examples": {
                  "serverError": {
                    "summary": "Unexpected error",
                    "value": {
                      "message": "Error creating event"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/events/my": {
      "get": {
        "summary": "Get the events of the current user",
        "description": "This endpoint retrieves all events created by the authenticated user. The request requires a valid bearer token for authentication.",
        "operationId": "getUserEvents",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the user's events.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "examples": {
                  "unauthorized": {
                    "summary": "Invalid token",
                    "value": {
                      "message": "Unauthorized - Missing or invalid token"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No events found for the user.",
            "content": {
              "application/json": {
                "examples": {
                  "noEvents": {
                    "summary": "User has no events",
                    "value": {
                      "message": "No events found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred on the server while fetching the user's events.",
            "content": {
              "application/json": {
                "examples": {
                  "serverError": {
                    "summary": "Unexpected error",
                    "value": {
                      "message": "Error fetching events"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/events/{id}": {
      "get": {
        "summary": "Get a specific event by ID",
        "description": "Retrieve detailed information about a specific event using its unique ID.",
        "operationId": "getEventById",
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the event.",
            "schema": {
              "type": "string",
              "example": "123e4567-e89b-12d3-a456-426614174000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "404": {
            "description": "The event with the specified ID was not found.",
            "content": {
              "application/json": {
                "examples": {
                  "notFound": {
                    "summary": "Event not found",
                    "value": {
                      "message": "Event not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred on the server.",
            "content": {
              "application/json": {
                "examples": {
                  "serverError": {
                    "summary": "Unexpected error",
                    "value": {
                      "message": "Error fetching event"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a specific event by ID",
        "description": "Update the details of an existing event using its unique ID. This endpoint allows modifications to fields like name, description, date, price, and event picture.",
        "operationId": "updateEvent",
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the event to be updated.",
            "schema": {
              "type": "string",
              "example": "123e4567-e89b-12d3-a456-426614174000"
            }
          }
        ],
        "requestBody": {
          "description": "Data for updating the event. Fields that are not provided will remain unchanged.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Updated name of the event.",
                    "example": "Tech Conference 2024 (Updated)"
                  },
                  "description": {
                    "type": "string",
                    "description": "Updated description of the event.",
                    "example": "An updated cutting-edge conference on emerging tech trends."
                  },
                  "startAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Updated start date and time of the event.",
                    "example": "2024-05-15T09:00:00Z"
                  },
                  "endAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Updated end date and time of the event.",
                    "example": "2024-05-16T17:00:00Z"
                  },
                  "price": {
                    "type": "number",
                    "description": "Updated price of the event.",
                    "example": 249.99
                  },
                  "eventPicture": {
                    "type": "string",
                    "format": "binary",
                    "description": "New image file for the event."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The event was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                },
                "examples": {
                  "success": {
                    "summary": "Updated event details",
                    "value": {
                      "id": "123e4567-e89b-12d3-a456-426614174000",
                      "name": "Tech Conference 2024 (Updated)",
                      "description": "An updated cutting-edge conference on emerging tech trends.",
                      "startAt": "2024-05-15T10:00:00Z",
                      "endAt": "2024-05-16T18:00:00Z",
                      "price": 249.99,
                      "eventPicture": "/uploads/event_pictures/updated_conference_image.jpg",
                      "userId": "123e4567-e89b-12d3-a456-426614174001",
                      "eventstatus_id": "44444444-4444-4444-4444-444444444444"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data, such as unsupported file types.",
            "content": {
              "application/json": {
                "examples": {
                  "invalidFileType": {
                    "summary": "Invalid file type",
                    "value": {
                      "message": "Invalid file type. Only PNG, JPEG, and JPG are allowed."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The event with the specified ID was not found.",
            "content": {
              "application/json": {
                "examples": {
                  "notFound": {
                    "summary": "Event not found",
                    "value": {
                      "message": "Event not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred while updating the event.",
            "content": {
              "application/json": {
                "examples": {
                  "serverError": {
                    "summary": "Unexpected error",
                    "value": {
                      "message": "Error updating event"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a specific event by ID",
        "description": "Deletes an event using its unique ID. If the event does not exist, a 404 error is returned.",
        "operationId": "deleteEvent",
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the event to delete.",
            "schema": {
              "type": "string",
              "example": "123e4567-e89b-12d3-a456-426614174000"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Event deleted successfully. No content is returned."
          },
          "404": {
            "description": "The event with the specified ID was not found.",
            "content": {
              "application/json": {
                "examples": {
                  "notFound": {
                    "summary": "Event not found",
                    "value": {
                      "message": "Event not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred while deleting the event.",
            "content": {
              "application/json": {
                "examples": {
                  "serverError": {
                    "summary": "Unexpected error",
                    "value": {
                      "message": "Error deleting event"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/events/{id}/status": {
      "put": {
        "summary": "Approve a specific event by ID",
        "description": "Allows an admin to approve an event by updating its status to 'Aprovado'. The event must have a current status of 'Pendente'.",
        "operationId": "updateEventStatus",
        "tags": [
          "Events"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the event to approve.",
            "schema": {
              "type": "string",
              "example": "123e4567-e89b-12d3-a456-426614174000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event status updated successfully to 'Approved'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "400": {
            "description": "Event status is not 'Pending'.",
            "content": {
              "application/json": {
                "examples": {
                  "notPending": {
                    "summary": "Invalid status",
                    "value": {
                      "message": "Event status is not pending"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Event or required status not found.",
            "content": {
              "application/json": {
                "examples": {
                  "eventNotFound": {
                    "summary": "Event not found",
                    "value": {
                      "message": "Event not found"
                    }
                  },
                  "statusNotFound": {
                    "summary": "Status not found",
                    "value": {
                      "message": "Event status not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred while updating the event status.",
            "content": {
              "application/json": {
                "examples": {
                  "serverError": {
                    "summary": "Unexpected error",
                    "value": {
                      "message": "Error updating event status"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/events/{id}/cancel": {
      "put": {
        "summary": "Cancel a specific event by ID",
        "description": "Allows the cancellation of a specific event by updating its status to 'Cancelado' and processing associated refunds for ticket purchases.",
        "operationId": "cancelEvent",
        "tags": [
          "Events"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the event to cancel.",
            "schema": {
              "type": "string",
              "example": "123e4567-e89b-12d3-a456-426614174000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event cancelled successfully. Refunds for associated tickets have been processed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                },
                "examples": {
                  "success": {
                    "summary": "Event cancelled successfully",
                    "value": {
                      "eventID": "123e4567-e89b-12d3-a456-426614174000",
                      "status": "Cancelled"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Event not found or required status not found.",
            "content": {
              "application/json": {
                "examples": {
                  "eventNotFound": {
                    "summary": "Event not found",
                    "value": {
                      "message": "Event not found"
                    }
                  },
                  "statusNotFound": {
                    "summary": "Status not found",
                    "value": {
                      "message": "Event status not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred while processing the cancellation.",
            "content": {
              "application/json": {
                "examples": {
                  "serverError": {
                    "summary": "Unexpected error",
                    "value": {
                      "message": "Error updating event status"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/events/suspended": {
      "get": {
        "summary": "Get all suspended events",
        "description": "Retrieve a list of all events that are currently suspended. This endpoint is typically restricted to admin users.",
        "operationId": "getSuspendedEvents",
        "tags": [
          "Events"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of suspended events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No suspended events found",
            "content": {
              "application/json": {
                "examples": {
                  "noEvents": {
                    "summary": "No suspended events",
                    "value": {
                      "message": "No suspended events found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "examples": {
                  "unauthorized": {
                    "summary": "Invalid or missing token",
                    "value": {
                      "message": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "examples": {
                  "forbidden": {
                    "summary": "Admin access required",
                    "value": {
                      "message": "Forbidden - Admin access required"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "examples": {
                  "serverError": {
                    "summary": "Unexpected error",
                    "value": {
                      "message": "Error fetching events"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/events/approved": {
      "get": {
        "summary": "Get all approved events",
        "description": "Retrieve a list of all events that are currently approved and will be used by the users of the application. This list contains events that have been validated and made available to the users for interaction.",
        "operationId": "getApprovedEvents",
        "tags": [
          "Events"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of approved events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No approved events found",
            "content": {
              "application/json": {
                "examples": {
                  "noEvents": {
                    "summary": "No approved events",
                    "value": {
                      "message": "No approved events found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "examples": {
                  "unauthorized": {
                    "summary": "Invalid or missing token",
                    "value": {
                      "message": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "examples": {
                  "forbidden": {
                    "summary": "Admin access required",
                    "value": {
                      "message": "Forbidden - Admin access required"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "examples": {
                  "serverError": {
                    "summary": "Unexpected error",
                    "value": {
                      "message": "Error fetching events"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/addressEvents": {
      "get": {
        "summary": "Get all address events",
        "operationId": "getAllAddressEvents",
        "description": "This endpoint retrieves a list of all address events stored in the system. Address events represent specific locations tied to a certain event. If no address events are found, a 404 error is returned.",
        "tags": [
          "AddressEvents"
        ],
        "responses": {
          "200": {
            "description": "A list of address events retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AddressEvent"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No address events found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "summary": "Create a new address event",
        "operationId": "createAddressEvent",
        "description": "This endpoint allows you to create a new address event by providing the address details, such as the event ID, road name, road number, postal code, and the localtown. If any required fields are missing, it returns a 400 error.",
        "tags": [
          "AddressEvents"
        ],
        "requestBody": {
          "description": "Address event to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressEventInput"
              },
              "example": {
                "event_id": "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                "roadNumber": 485,
                "postCode": "94043",
                "road": "Mountain View",
                "localtown": "f58c9b62-91f0-42ec-96f0-7cc679c0718a"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Address event created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressEvent"
                },
                "example": {
                  "id": "b3f5d0a9-22a3-45c0-804b-b1e2b028953b",
                  "event_id": "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                  "roadNumber": 485,
                  "postCode": "94043",
                  "road": "Mountain View",
                  "localtown": "f58c9b62-91f0-42ec-96f0-7cc679c0718a"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing required fields"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/addressEvents/{id}": {
      "get": {
        "summary": "Get a specific address event by ID",
        "operationId": "getAddressEventById",
        "description": "This endpoint allows you to retrieve a specific address event using its unique ID. If no address event is found for the given ID, it returns a 404 error.",
        "tags": [
          "AddressEvents"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the address event",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Address event found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressEvent"
                }
              }
            }
          },
          "404": {
            "description": "Address event not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "summary": "Update a specific address event by ID",
        "operationId": "updateAddressEvent",
        "description": "This endpoint allows you to update the details of a specific address event by providing the ID. You can modify the road, road number, postal code, and localtown. If the address event is not found, it returns a 404 error.",
        "tags": [
          "AddressEvents"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the address event",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated address event data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressEventInput"
              },
              "example": {
                "event_id": "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                "roadNumber": 485,
                "postCode": "94043",
                "road": "Mountain View",
                "localtown": "f58c9b62-91f0-42ec-96f0-7cc679c0718a"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Address event updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressEvent"
                }
              }
            }
          },
          "404": {
            "description": "Address event not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "summary": "Delete a specific address event by ID",
        "operationId": "deleteAddressEvent",
        "description": "This endpoint allows you to delete a specific address event by ID. If the address event is found and deleted, it returns a 204 status code. If the event is not found, it returns a 404 error.",
        "tags": [
          "AddressEvents"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the address event to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Address event deleted successfully"
          },
          "404": {
            "description": "Address event not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/routesEvents": {
      "get": {
        "summary": "Get all routes events",
        "operationId": "getAllRoutesEvents",
        "description": "This endpoint retrieves a list of all routes events stored in the system. Routes events represent specific route points related to an event, and are crucial for mapping and planning purposes. If no routes events are found, a 404 error will be returned.",
        "tags": [
          "RoutesEvents"
        ],
        "responses": {
          "200": {
            "description": "A list of routes events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoutesEvent"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No routes events found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "summary": "Create a new routes event",
        "operationId": "createRoutesEvent",
        "description": "This endpoint allows you to create a new routes event by providing the required parameters such as latitude, longitude, order, and the related address event ID. If any of these fields are missing, a 400 error will be returned.",
        "tags": [
          "RoutesEvents"
        ],
        "requestBody": {
          "description": "Routes event to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoutesEventInput"
              },
              "example": {
                "latitude": 37.7749,
                "longitude": -122.4194,
                "order": 1,
                "addressEvent_id": "dddddddd-dddd-dddd-dddd-dddddddddddd"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Routes event created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutesEvent"
                },
                "example": {
                  "routeID": "f8d99d7e-5cfd-42d7-9fdd-c33f33c9a413",
                  "latitude": 37.7749,
                  "longitude": -122.4194,
                  "order": 1,
                  "addressEvent_id": "dddddddd-dddd-dddd-dddd-dddddddddddd"
                }
              }
            },
            "400": {
              "description": "Bad Request - Missing required fields"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      }
    },
    "/routesEvents/{id}": {
      "get": {
        "summary": "Get a specific routes event by ID",
        "operationId": "getRoutesEventById",
        "description": "This endpoint allows you to retrieve a specific routes event using its unique ID. If the routes event does not exist, a 404 error will be returned.",
        "tags": [
          "RoutesEvents"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the routes event",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Routes event found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutesEvent"
                }
              }
            }
          },
          "404": {
            "description": "Routes event not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "summary": "Update a specific routes event by ID",
        "operationId": "updateRoutesEvent",
        "description": "This endpoint allows you to update the details of a specific routes event, such as latitude, longitude, order, and the related address event ID. If the routes event is not found, a 404 error will be returned.",
        "tags": [
          "RoutesEvents"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the routes event",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated routes event data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoutesEventInput"
              },
              "example": {
                "latitude": 37.7749,
                "longitude": -122.4194,
                "order": 2,
                "addressEvent_id": "dddddddd-dddd-dddd-dddd-dddddddddddd"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Routes event updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutesEvent"
                }
              }
            }
          },
          "404": {
            "description": "Routes event not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "summary": "Delete a specific routes event by ID",
        "operationId": "deleteRoutesEvent",
        "description": "This endpoint allows you to delete a specific routes event by ID. If the routes event is not found, a 404 error will be returned. If the deletion is successful, it returns a 204 status code.",
        "tags": [
          "RoutesEvents"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the routes event to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Routes event deleted successfully"
          },
          "404": {
            "description": "Routes event not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/eventStatus": {
      "get": {
        "summary": "Get all event statuses",
        "description": "Retrieve a list of all event statuses available in the system.",
        "operationId": "getAllEventStatuses",
        "tags": [
          "EventStatus"
        ],
        "responses": {
          "200": {
            "description": "A list of event statuses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventStatus"
                  }
                },
                "example": [
                  {
                    "eventStatusID": "11111111-1111-1111-1111-111111111111",
                    "status": "Scheduled"
                  },
                  {
                    "eventStatusID": "22222222-2222-2222-2222-222222222222",
                    "status": "Completed"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "No event statuses found"
          }
        }
      },
      "post": {
        "summary": "Create a new event status",
        "description": "Create a new event status in the system with the provided status value.",
        "operationId": "createEventStatus",
        "tags": [
          "EventStatus"
        ],
        "requestBody": {
          "description": "Data for creating a new event status",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventStatusInput"
              },
              "example": {
                "status": "In Progress"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Event status created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventStatus"
                },
                "example": {
                  "eventStatusID": "33333333-3333-3333-3333-333333333333",
                  "status": "In Progress"
                }
              }
            }
          },
          "400": {
            "description": "Missing required field: status"
          },
          "500": {
            "description": "Error creating event status"
          }
        }
      }
    },
    "/eventStatus/{id}": {
      "get": {
        "summary": "Get an event status by ID",
        "description": "Retrieve the details of a specific event status using its unique identifier.",
        "operationId": "getEventStatusById",
        "tags": [
          "EventStatus"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the event status",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The event status object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventStatus"
                },
                "example": {
                  "eventStatusID": "44444444-4444-4444-4444-444444444444",
                  "status": "Cancelled"
                }
              }
            }
          },
          "404": {
            "description": "Event status not found"
          },
          "500": {
            "description": "Error fetching event status"
          }
        }
      },
      "put": {
        "summary": "Update an event status",
        "description": "Update the status of an existing event using the provided ID and new status data.",
        "operationId": "updateEventStatus",
        "tags": [
          "EventStatus"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the event status to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated event status data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventStatusInput"
              },
              "example": {
                "status": "Postponed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventStatus"
                },
                "example": {
                  "eventStatusID": "55555555-5555-5555-5555-555555555555",
                  "status": "Postponed"
                }
              }
            }
          },
          "404": {
            "description": "Event status not found"
          },
          "500": {
            "description": "Error updating event status"
          }
        }
      },
      "delete": {
        "summary": "Delete an event status",
        "description": "Delete a specific event status from the system using its ID.",
        "operationId": "deleteEventStatus",
        "tags": [
          "EventStatus"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the event status to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Event status deleted successfully"
          },
          "404": {
            "description": "Event status not found"
          },
          "500": {
            "description": "Error deleting event status"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "Bearer token authentication"
      }
    },
    "schemas": {
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the event"
          },
          "name": {
            "type": "string",
            "description": "Name of the event"
          },
          "description": {
            "type": "string",
            "description": "Description of the event"
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "description": "Start date and time of the event"
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "description": "End date and time of the event"
          },
          "price": {
            "type": "number",
            "description": "Price of the event"
          },
          "eventPicture": {
            "type": "string",
            "description": "Event status ID"
          }
        }
      },
      "EventInput": {
        "type": "object",
        "required": [
          "name",
          "description",
          "startAt",
          "endAt",
          "price"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the event"
          },
          "description": {
            "type": "string",
            "description": "Description of the event"
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "description": "Start date and time of the event"
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "description": "End date and time of the event"
          },
          "price": {
            "type": "number",
            "description": "Price of the event"
          }
        }
      },
      "AddressEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the address event"
          },
          "event_id": {
            "type": "string",
            "description": "ID of the associated event"
          },
          "localtown": {
            "type": "string",
            "description": "Local town for the event"
          },
          "postCode": {
            "type": "string",
            "description": "Postal code for the event address"
          },
          "roadNumber": {
            "type": "string",
            "description": "Road number where the event is located"
          },
          "road": {
            "type": "string",
            "description": "Road where the event is located"
          }
        }
      },
      "AddressEventInput": {
        "type": "object",
        "required": [
          "event_id",
          "localtown",
          "postCode",
          "roadNumber",
          "road"
        ],
        "properties": {
          "event_id": {
            "type": "string",
            "description": "ID of the associated event"
          },
          "localtown": {
            "type": "string",
            "description": "Address for the event"
          },
          "postCode": {
            "type": "string",
            "description": "Postal code for the event address"
          },
          "roadNumber": {
            "type": "string",
            "description": "City where the event is located"
          },
          "road": {
            "type": "string",
            "description": "State where the event is located"
          }
        }
      },
      "RoutesEvent": {
        "type": "object",
        "properties": {
          "routeID": {
            "type": "string",
            "description": "ID of the route event"
          },
          "latitude": {
            "type": "number",
            "description": "Latitude of the route"
          },
          "longitude": {
            "type": "number",
            "description": "Longitude of the route"
          },
          "order": {
            "type": "integer",
            "description": "Order of the route in the sequence"
          },
          "addressEvent_id": {
            "type": "string",
            "description": "ID of the associated address event"
          }
        }
      },
      "RoutesEventInput": {
        "type": "object",
        "required": [
          "latitude",
          "longitude",
          "order",
          "addressEvent_id"
        ],
        "properties": {
          "latitude": {
            "type": "number",
            "description": "Latitude of the route"
          },
          "longitude": {
            "type": "number",
            "description": "Longitude of the route"
          },
          "order": {
            "type": "integer",
            "description": "Order of the route in the sequence"
          },
          "addressEvent_id": {
            "type": "string",
            "description": "ID of the associated address event"
          }
        }
      },
      "EventStatus": {
        "type": "object",
        "properties": {
          "eventStatusID": {
            "type": "string",
            "example": "11111111-1111-1111-1111-111111111111"
          },
          "status": {
            "type": "string",
            "example": "Scheduled"
          }
        }
      },
      "EventStatusInput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "Completed"
          }
        },
        "required": [
          "status"
        ]
      }
    }
  }
}