{
  "openapi": "3.0.0",
  "info": {
    "title": "UserInEvent API",
    "description": "API for managing UserInEvent entities and feedbacks.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "/userinevent/api"
    }
  ],
  "paths": {
    "/tickets": {
      "get": {
        "summary": "Get all tickets",
        "description": "Retrieve a list of all tickets (UserInEvents).",
        "operationId": "getAllUserInEvents",
        "tags": ["Tickets"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of UserInEvents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/UserInEvent" }
                }
              }
            }
          },
          "500": {
            "description": "Error fetching UserInEvents",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new ticket",
        "description": "Create a new UserInEvent (ticket) for the logged-in user.",
        "operationId": "createUserInEvent",
        "tags": ["Tickets"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { 
                "$ref": "#/components/schemas/UserInEvent" 
              },
              "example": {
                "event_id": "87654321-1234-cdef-1234-abcdef987654"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "UserInEvent created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserInEvent" }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": {
            "description": "Error creating UserInEvent",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/tickets/event/{eventId}": {
      "get": {
        "summary": "Get tickets by event ID",
        "description": "Retrieve a list of UserInEvents (tickets) for a specific event by its ID.",
        "operationId": "getTicketsByEventId",
        "tags": ["Tickets"],
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "The ID of the event"
          }
        ],
        "responses": {
          "200": {
            "description": "List of UserInEvents for the event",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/UserInEvent" }
                }
              }
            }
          },
          "404": {
            "description": "Tickets not found for the event",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": {
            "description": "Error fetching tickets for the event",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/tickets/my": {
      "get": {
        "summary": "Get my tickets",
        "description": "Retrieve a list of tickets for the logged-in user.",
        "operationId": "getUserTickets",
        "tags": ["Tickets"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of UserInEvents for the logged-in user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/UserInEvent" }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": {
            "description": "Error fetching UserInEvents",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/tickets/{id}": {
      "get": {
        "summary": "Get ticket by ID",
        "description": "Retrieve a UserInEvent by its ID.",
        "operationId": "getUserInEventById",
        "tags": ["Tickets"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "The ID of the UserInEvent"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested UserInEvent",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserInEvent" }
              }
            }
          },
          "404": {
            "description": "UserInEvent not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": {
            "description": "Error fetching UserInEvent",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a ticket",
        "description": "Modify an existing UserInEvent by its ID.",
        "operationId": "updateUserInEvent",
        "tags": ["Tickets"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "The ID of the UserInEvent"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserInEvent" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "UserInEvent updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserInEvent" }
              }
            }
          },
          "404": {
            "description": "UserInEvent not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": {
            "description": "Error updating UserInEvent",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a ticket",
        "description": "Remove a UserInEvent by its ID.",
        "operationId": "deleteUserInEvent",
        "tags": ["Tickets"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "The ID of the UserInEvent"
          }
        ],
        "responses": {
          "200": {
            "description": "UserInEvent deleted successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Success" }
              }
            }
          },
          "404": {
            "description": "UserInEvent not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": {
            "description": "Error deleting UserInEvent",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/tickets/qrcode/{ticketId}": {
      "get": {
        "summary": "Generate QR Code for a ticket",
        "description": "Generates a QR Code image for a ticket by its ID.",
        "operationId": "generateQrCode",
        "tags": ["Tickets"],
        "parameters": [
          {
            "name": "ticketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the ticket for which to generate the QR Code"
          }
        ],
        "responses": {
          "200": {
            "description": "QR Code image generated successfully",
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Ticket not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Error generating QR Code",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/tickets/qrcode/read/{ticketId}": {
      "put": {
        "summary": "Mark ticket as participated by qr code",
        "description": "Updates the participation status of a UserInEvent ticket to 'participated'.",
        "operationId": "updateUserParticipationInEvent",
        "tags": ["Tickets"],
        "parameters": [
          {
            "name": "ticketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the ticket to update"
          }
        ],
        "responses": {
          "200": {
            "description": "Ticket participation status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInEvent"
                }
              }
            }
          },
          "404": {
            "description": "UserInEvent not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Error updating UserInEvent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/feedbacks": {
      "get": {
        "summary": "Get all feedbacks",
        "description": "Retrieve a list of all feedbacks.",
        "operationId": "getAllFeedbacks",
        "tags": ["Feedbacks"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of feedbacks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Feedback" }
                }
              }
            }
          },
          "500": {
            "description": "Error fetching feedbacks",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/feedbacks/{ticketID}": {
      "post": {
        "summary": "Create a new feedback",
        "description": "Submit feedback for a specific UserInEvent (ticket).",
        "operationId": "createFeedback",
        "tags": ["Feedbacks"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "ticketID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the UserInEvent (ticket) for which feedback is being submitted"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/NewFeedback" },
              "example": {
                "rating": 5,
                "commentary": "Amazing event, very well organized!"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Feedback created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Feedback" }
              }
            }
          },
          "400": {
            "description": "Missing required fields or invalid data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": {
            "description": "Error creating feedback",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/feedbacks/{id}": {
      "get": {
        "summary": "Get feedback by ID",
        "description": "Retrieve feedback by its ID.",
        "operationId": "getFeedbackById",
        "tags": ["Feedbacks"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "The ID of the Feedback"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested feedback",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Feedback" }
              }
            }
          },
          "404": {
            "description": "Feedback not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": {
            "description": "Error fetching feedback",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a feedback",
        "description": "Modify an existing feedback by its ID.",
        "operationId": "updateFeedback",
        "tags": ["Feedbacks"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "The ID of the Feedback"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Feedback" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Feedback updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Feedback" }
              }
            }
          },
          "404": {
            "description": "Feedback not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": {
            "description": "Error updating feedback",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete feedback",
        "description": "Remove a feedback by its ID.",
        "operationId": "deleteFeedback",
        "tags": ["Feedbacks"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "The ID of the Feedback"
          }
        ],
        "responses": {
          "200": {
            "description": "Feedback deleted successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Success" }
              }
            }
          },
          "404": {
            "description": "Feedback not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": {
            "description": "Error deleting feedback",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/feedbacks/event/{eventId}": {
      "get": {
        "summary": "Get Event Feedbacks",
        "description": "Retrieve feedbacks for a specific event.",
        "operationId": "getEventFeedbacks",
        "tags": ["Feedbacks"],
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "The ID of the Event"
          }
        ],
        "responses": {
          "200": {
            "description": "List of feedbacks for the event",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Feedback" }
                }
              }
            }
          },
          "404": {
            "description": "Event not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": {
            "description": "Error fetching feedbacks for event",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "Bearer token authentication"
      }
    },
    "schemas": {
      "UserInEvent": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "userId": { "type": "string" },
          "eventId": { "type": "string" },
          "participationStatus": { "type": "string" }
        }
      },
      "Feedback": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "userId": { "type": "string" },
          "eventId": { "type": "string" },
          "rating": { "type": "integer" },
          "comments": { "type": "string" }
        }
      },
      "NewFeedback": {
        "type": "object",
        "properties": {
          "userId": { "type": "string" },
          "eventId": { "type": "string" },
          "rating": { "type": "integer" },
          "comments": { "type": "string" }
        },
        "required": ["userId", "eventId", "rating"]
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": { "type": "string" }
        }
      },
      "Success": {
        "type": "object",
        "properties": {
          "message": { "type": "string" }
        }
      }
    }
  }
}
